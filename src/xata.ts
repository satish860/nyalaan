// Generated by Xata Codegen 0.23.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Dashboard",
    columns: [
      { name: "user_id", type: "string" },
      { name: "video_name", type: "string" },
      { name: "title", type: "string" },
      { name: "thumbnail", type: "text" },
      { name: "author", type: "string" },
      { name: "url", type: "string" },
    ],
  },
  {
    name: "VideoRecord",
    columns: [
      { name: "VideoUrl", type: "string" },
      { name: "transcription", type: "text" },
      { name: "transcriptionurl", type: "text" },
      { name: "video_id", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Dashboard = InferredTypes["Dashboard"];
export type DashboardRecord = Dashboard & XataRecord;

export type VideoRecord = InferredTypes["VideoRecord"];
export type VideoRecordRecord = VideoRecord & XataRecord;

export type DatabaseSchema = {
  Dashboard: DashboardRecord;
  VideoRecord: VideoRecordRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://satish-s-workspace-6midd6.us-east-1.xata.sh/db/Nyalaan",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
